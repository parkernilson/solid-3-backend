create type "public"."shared_goal_status" as enum ('pending', 'accepted', 'rejected');

create table "public"."entries" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "goal" uuid not null,
    "text_content" text,
    "success" boolean not null
);


alter table "public"."entries" enable row level security;

create table "public"."goals" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "owner" uuid not null
);


alter table "public"."goals" enable row level security;

create table "public"."shared_goals" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "goal" uuid not null,
    "shared_with" uuid,
    "status" shared_goal_status not null default 'pending'::shared_goal_status
);


alter table "public"."shared_goals" enable row level security;

CREATE UNIQUE INDEX entries_pkey ON public.entries USING btree (id);

CREATE UNIQUE INDEX goals_pkey ON public.goals USING btree (id);

CREATE UNIQUE INDEX shared_goals_pkey ON public.shared_goals USING btree (id);

alter table "public"."entries" add constraint "entries_pkey" PRIMARY KEY using index "entries_pkey";

alter table "public"."goals" add constraint "goals_pkey" PRIMARY KEY using index "goals_pkey";

alter table "public"."shared_goals" add constraint "shared_goals_pkey" PRIMARY KEY using index "shared_goals_pkey";

alter table "public"."entries" add constraint "entries_goal_fkey" FOREIGN KEY (goal) REFERENCES goals(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."entries" validate constraint "entries_goal_fkey";

alter table "public"."goals" add constraint "goals_owner_fkey" FOREIGN KEY (owner) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."goals" validate constraint "goals_owner_fkey";

alter table "public"."shared_goals" add constraint "shared_goals_goal_fkey" FOREIGN KEY (goal) REFERENCES goals(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."shared_goals" validate constraint "shared_goals_goal_fkey";

alter table "public"."shared_goals" add constraint "shared_goals_shared_with_fkey" FOREIGN KEY (shared_with) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."shared_goals" validate constraint "shared_goals_shared_with_fkey";

grant delete on table "public"."entries" to "anon";

grant insert on table "public"."entries" to "anon";

grant references on table "public"."entries" to "anon";

grant select on table "public"."entries" to "anon";

grant trigger on table "public"."entries" to "anon";

grant truncate on table "public"."entries" to "anon";

grant update on table "public"."entries" to "anon";

grant delete on table "public"."entries" to "authenticated";

grant insert on table "public"."entries" to "authenticated";

grant references on table "public"."entries" to "authenticated";

grant select on table "public"."entries" to "authenticated";

grant trigger on table "public"."entries" to "authenticated";

grant truncate on table "public"."entries" to "authenticated";

grant update on table "public"."entries" to "authenticated";

grant delete on table "public"."entries" to "service_role";

grant insert on table "public"."entries" to "service_role";

grant references on table "public"."entries" to "service_role";

grant select on table "public"."entries" to "service_role";

grant trigger on table "public"."entries" to "service_role";

grant truncate on table "public"."entries" to "service_role";

grant update on table "public"."entries" to "service_role";

grant delete on table "public"."goals" to "anon";

grant insert on table "public"."goals" to "anon";

grant references on table "public"."goals" to "anon";

grant select on table "public"."goals" to "anon";

grant trigger on table "public"."goals" to "anon";

grant truncate on table "public"."goals" to "anon";

grant update on table "public"."goals" to "anon";

grant delete on table "public"."goals" to "authenticated";

grant insert on table "public"."goals" to "authenticated";

grant references on table "public"."goals" to "authenticated";

grant select on table "public"."goals" to "authenticated";

grant trigger on table "public"."goals" to "authenticated";

grant truncate on table "public"."goals" to "authenticated";

grant update on table "public"."goals" to "authenticated";

grant delete on table "public"."goals" to "service_role";

grant insert on table "public"."goals" to "service_role";

grant references on table "public"."goals" to "service_role";

grant select on table "public"."goals" to "service_role";

grant trigger on table "public"."goals" to "service_role";

grant truncate on table "public"."goals" to "service_role";

grant update on table "public"."goals" to "service_role";

grant delete on table "public"."shared_goals" to "anon";

grant insert on table "public"."shared_goals" to "anon";

grant references on table "public"."shared_goals" to "anon";

grant select on table "public"."shared_goals" to "anon";

grant trigger on table "public"."shared_goals" to "anon";

grant truncate on table "public"."shared_goals" to "anon";

grant update on table "public"."shared_goals" to "anon";

grant delete on table "public"."shared_goals" to "authenticated";

grant insert on table "public"."shared_goals" to "authenticated";

grant references on table "public"."shared_goals" to "authenticated";

grant select on table "public"."shared_goals" to "authenticated";

grant trigger on table "public"."shared_goals" to "authenticated";

grant truncate on table "public"."shared_goals" to "authenticated";

grant update on table "public"."shared_goals" to "authenticated";

grant delete on table "public"."shared_goals" to "service_role";

grant insert on table "public"."shared_goals" to "service_role";

grant references on table "public"."shared_goals" to "service_role";

grant select on table "public"."shared_goals" to "service_role";

grant trigger on table "public"."shared_goals" to "service_role";

grant truncate on table "public"."shared_goals" to "service_role";

grant update on table "public"."shared_goals" to "service_role";

create policy "Owner can SELECT"
on "public"."entries"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = ( SELECT g.owner
   FROM goals g
  WHERE (g.id = entries.goal))));


create policy "Users who have accepted share request can SELECT"
on "public"."entries"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT 1
   FROM shared_goals sg
  WHERE ((sg.goal = entries.goal) AND (sg.shared_with = auth.uid()) AND (sg.status = 'accepted'::shared_goal_status)))));


create policy "Owner can SELECT"
on "public"."goals"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = owner));


create policy "Users that have been shared with can SELECT"
on "public"."goals"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT 1
   FROM shared_goals sg
  WHERE (((sg.goal = goals.id) AND (sg.shared_with = auth.uid()) AND (sg.status = 'accepted'::shared_goal_status)) OR (sg.status = 'pending'::shared_goal_status)))));


create policy "Owner can SELECT"
on "public"."shared_goals"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = ( SELECT g.id
   FROM goals g
  WHERE (g.id = shared_goals.goal))));


create policy "Shared with can SELECT"
on "public"."shared_goals"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = shared_with));




